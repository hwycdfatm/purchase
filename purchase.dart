void listenToPurchaseUpdates() {
  _subscription = _iap.purchaseStream.listen(
    (List<PurchaseDetails> purchases) async {
      if (!mounted) return;
      setState(() {
        isBuying = purchases.isNotEmpty;
      });

      logDev('Giao d·ªãch: ${purchases.length}');

      for (var purchase in purchases) {
        if (purchase.status == PurchaseStatus.restored) {
          logDev('Giao d·ªãch ƒë√£ ƒë∆∞·ª£c kh√¥i ph·ª•c: ${purchase.productID}');

          final receipt = purchase.verificationData.serverVerificationData;

          // Ho√†n t·∫•t giao d·ªãch ƒë·ªÉ tr√°nh t√¨nh tr·∫°ng treo
          if (purchase.pendingCompletePurchase) {
            await _iap.completePurchase(purchase);
          }

          try {
            // G·ª≠i l√™n server ƒë·ªÉ x√°c minh
            final check = await _verifyReceiptWithServer(receipt,
                restore: true, productId: purchase.productID);

            if (check) {
              if (!mounted) return;
              showDialog(
                  context: context,
                  builder: (context) {
                    return TDialog(
                      title: Text('Kh√¥i ph·ª•c th√†nh c√¥ng'),
                      content: Text(
                        'Giao d·ªãch ƒë√£ ƒë∆∞·ª£c kh√¥i ph·ª•c th√†nh c√¥ng.\nVui l√≤ng kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng.',
                        textAlign: TextAlign.center,
                      ),
                      confirm: TDialogButton('X√°c nh·∫≠n', onPress: () {
                        exit(0);
                      }),
                    );
                  });
            }
          } catch (e) {
            if (!mounted) return;
            showDialog(
                context: context,
                builder: (context) {
                  return TDialog(
                    title: Text('L·ªói'),
                    content: Text(
                        'Kh√¥i ph·ª•c giao d·ªãch th·∫•t b·∫°i.\nVui l√≤ng th·ª≠ l·∫°i sau.'),
                    confirm: TDialogButton('X√°c nh·∫≠n', onPress: () {
                      Navigator.pop(context);
                      setState(() {
                        isBuying = false;
                      });
                    }),
                  );
                });
          }

          return;
        }

        if (purchase.status == PurchaseStatus.purchased) {
          // X·ª≠ l√Ω giao d·ªãch (VD: x√°c nh·∫≠n v·ªõi server, m·ªü kh√≥a t√≠nh nƒÉng, v.v.)
          // handlePurchase(purchase);
          logDev('Giao d·ªãch th√†nh c√¥ng: ${purchase.productID}');

          logDev(
              'üìå local purchase: ${purchase.verificationData.localVerificationData}');

          logDev(
              'üìå server purchase: ${purchase.verificationData.serverVerificationData}');

          final receipt = purchase.verificationData.serverVerificationData;

          // G·ª≠i l√™n server ƒë·ªÉ x√°c minh
          final check = await _verifyReceiptWithServer(receipt,
              productId: purchase.productID);

          if (check) {
            // Ho√†n t·∫•t giao d·ªãch n·∫øu h·ª£p l·ªá
            await _iap.completePurchase(purchase);

            if (!mounted) return;
            Navigator.push(
                context,
                MaterialPageRoute(
                    builder: (context) => const WaitingPurchase()));
          }

          if (purchase.pendingCompletePurchase) {
            _iap.completePurchase(purchase);
          }

          return;
        } else if (purchase.status == PurchaseStatus.error) {
          logDev('L·ªói giao d·ªãch: ${purchase.error}');

          if (purchase.pendingCompletePurchase) {
            _iap.completePurchase(purchase);
          }

          return;
        }
      }
    },
    onDone: () {
      _subscription.cancel();

      logDev('K·∫øt th√∫c lu·ªìng giao d·ªãch');

      if (mounted) {
        setState(() {
          isBuying = false;
        });
      }
    },
    onError: (error) {
      logDev('L·ªói lu·ªìng giao d·ªãch: $error');
      if (mounted) {
        setState(() {
          isBuying = false;
        });
      }
    },
    cancelOnError: true,
  );
}

void buyProduct(ProductDetails product) async {
  final PurchaseParam purchaseParam = PurchaseParam(productDetails: product);

  logDev('Mua s·∫£n ph·∫©m: ${product.title}');

  if (Platform.isAndroid) {
    _iap.buyNonConsumable(
      purchaseParam: purchaseParam,
    );
  } else {
    _iap.buyConsumable(
      purchaseParam: purchaseParam,
    ); // Ho·∫∑c buyConsumable()
  }
}

Future<void> getProducts() async {
  final bool available = await _iap.isAvailable();
  if (!available) return;

  const Set<String> kIds = {'m√£ product 1', 'm√£ product 2', 'm√£ product 3'};
  const Set<String> aIds = {'m√£ product 1', 'm√£ product 2', 'm√£ product 3'};
  final ProductDetailsResponse response =
      await _iap.queryProductDetails(Platform.isIOS ? kIds : aIds);

  for (var product in response.productDetails) {
    logDev('S·∫£n ph·∫©m: ${product.title} - ${product.price}');
  }

  // logDev('L·ªói: ${response.error}');

  // logDev('Not found: ${response.notFoundIDs}');

  if (response.error != null) {
    return;
  }

  final List<ProductDetails> products = response.productDetails;

  products.sort((a, b) => a.rawPrice.compareTo(b.rawPrice));
  // Hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m
  if (!mounted) return;
  setState(() {
    listVip = products;
    isLoading = false;
  });
}

void checkPendingPurchases() async {
  final Stream<List<PurchaseDetails>> purchaseStream = _iap.purchaseStream;
  purchaseStream.listen((List<PurchaseDetails> purchases) {
    for (var purchase in purchases) {
      if (purchase.pendingCompletePurchase) {
        _iap.completePurchase(purchase);
      }
    }
  });
}

void initState() {
  super.initState();

  getProducts();

  checkPendingPurchases();

  listenToPurchaseUpdates();
}

int _index = 0;



  // g·ªçi h√†m buyProduct ƒë·ªÉ mua s·∫£n ph·∫©m

// d√πng   _iap.restorePurchases(); ƒë·ªÉ kh√¥i ph·ª•c

