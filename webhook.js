verifyAppleSubscription: async (req, res, next) => {
	try {
		const { signedPayload } = req.body

		if (!signedPayload) {
			throw new CustomError('Missing signedPayload', 400)
		}

		// Gi·∫£i m√£ JWT t·ª´ signedPayload
		const decodedPayload = jwt.decode(signedPayload, { complete: true })

		if (!decodedPayload) {
			throw new CustomError('Invalid signedPayload', 400)
		}

		// console.log('Decoded payload:', JSON.stringify(decodedPayload, null, 2))

		const payload = decodeAppleJWT(
			decodedPayload.payload.data.signedTransactionInfo
		)

		// console.log('Payload:', JSON.stringify(payload, null, 2))

		const notificationType = decodedPayload.payload.notificationType
		const subscriptionStatus = decodedPayload.payload.data.status

		const transactionId = payload.transactionId
		const originalTransactionId = payload.originalTransactionId.toString()

		logger(
			`[APPLE STORE SERVER NOTIFICATION]üîî Nh·∫≠n th√¥ng b√°o: ${notificationType} - Transaction ID: ${transactionId} - Subscription Status: ${subscriptionStatus} - OriginalTransactionId: ${originalTransactionId} - Payload: ${payload.productId}`
		)

		let create = true

		if (notificationType !== 'SUBSCRIBED' && notificationType !== 'DID_RENEW') {
			// `[Apple Store Server Notification] Ng∆∞·ªùi d√πng thay ƒë·ªïi th√¥ng tin ƒëƒÉng k√Ω tr√™n Itune`
		}

		// C·∫≠p nh·∫≠t tr·∫°ng th√°i subscription trong database
		if (notificationType === 'SUBSCRIBED') {
			// `[Apple Store Server Notification] Ng∆∞·ªùi d√πng ƒëƒÉng k√Ω m·ªõi, k·∫øt h·ª£p v·ªõi ph·∫ßn verfiy c·ªßa server`
		}

		if (
			notificationType === 'DID_RENEW'
			// notificationType === 'DID_CHANGE_RENEWAL_PREF' ||
			// notificationType === 'DID_CHANGE_RENEWAL_STATUS'
		) {
			create = false

			// `[Apple Store Server Notification] Ng∆∞·ªùi d√πng gia h·∫°n g√≥i VIP th√†nh c√¥ng`
		}
		if (notificationType === 'EXPIRED') {
			create = false

			// `[Apple Store Server Notification] Ng∆∞·ªùi d√πng ƒë√£ h·ªßy g√≥i VIP`
		}
	} catch (error) {
		logger.error(
			`[APPLE STORE SERVER NOTIFICATION] L·ªói khi x·ª≠ l√Ω th√¥ng b√°o: ${error.message}`
		)
		return res.status(200).json({
			status: 'error',
			message: 'Error processing Apple subscription notification',
		})

		// l∆∞u √Ω ph·∫£i tr·∫£ v·ªÅ 200 OK cho Apple ƒë·ªÉ tr√°nh b·ªã g·ª≠i l·∫°i th√¥ng b√°o
	}
}

function decodeAppleJWT(token) {
	try {
		const decoded = jwt.decode(token, { complete: true })
		return decoded?.payload
	} catch (error) {
		console.error('JWT decode error:', error)
		return null
	}
}
